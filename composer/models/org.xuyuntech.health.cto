/**
 * My commodity trading network
 */
namespace org.xuyuntech.health

enum Gender {
  o MALE
  o FEMALE
}

enum VisitTime {
  o AM
  o PM
}

participant Person identified by participantKey {
  o String participantKey
  o String phone
  o String name
  o String sid optional
  o String email optional
  o String address optional
  o String birthday optional
  o String avatar optional
  o Gender gender optional
  o Integer age optional
}

participant Patient extends Person {
  o Double totalSpend optional
}

participant Hospital identified by id {
  o String id
  o String name
  o String address optional
  o String phone1 optional // 座机区号
  o String phone2 optional // 座机号码 或 手机号
  o String CountryID optional // 邮编
  o String headImg optional // 头图
}

// Doctor 医师
participant Doctor extends Person {
  o String title // 职称
  o String description // 描述，擅长什么什么
}

participant Supplier identified by id {
  o String id
  o String name
  o String address
  o String zipCode
  o String telephone
  o String fax
  o String webSite
}

/* ==================  asset  ==================== */
asset MedicalItem identified by id {
  o String id
  o String title // 药品名称
  o Double quantity // 库存(有可能是小数)
  o Double price // 价格
  o String barcode // 条码
  o String batchNumber // 批次号
  o String permissionNumber // 批准文号
  o DateTime productionDate // 生产日期
  o DateTime expiredDate // 过期日期
  --> Supplier supplier
}

enum RegisterState {
  o Register // 挂号
  o Visiting // 就诊中
  o Finished // 已开处方
}

// RegisterHistory 挂号记录
asset RegisterHistory identified by id {
  o String id
  o RegisterState state // 状态
  o DateTime created // 创建时间
  --> Patient patient // 患者
  --> ArrangementHistory arrangementHistory // 排班记录
}

// ArrangementHistory 排班
asset ArrangementHistory identified by assetKey {
  o String assetKey
  o String description
  o DateTime visitDate // 出诊日期
  o VisitTime visitTime // 出诊时间(上午|下午)
  --> Hospital hospital
  --> Doctor doctor
}

// Prescription 处方
asset Prescription identified by participantKey {
  o String participantKey
  o String number // 处方编号
  o DateTime created // 创建时间
  --> Doctor doctor // 医师
  --> Patient patient // 患者
  --> MedicalItem[] medicalItems // 药品列表
  --> RegisterHistory registerHistory // 挂号记录
  --> CaseItem caseItem // 病例
}

// CaseItem 病例
asset CaseItem identified by participantKey {
  o String participantKey
  o String number // 病例编号
  o String complained // 主诉
  o String diagnose // 临床诊断内容, 现病史
  o String history // 既往史
  o String familyHistory // 家族史
  --> Patient patient
  --> Doctor doctor
  --> Hospital hospital
  o DateTime created
}

// PaymentHistory 支付记录
asset PaymentHistory identified by participantKey {
  o String participantKey
  o String number // 编号
  o Double spending // 总消费
  o DateTime created
  --> Order order
  --> Prescription prescription
  --> RegisterHistory registerHistory
  --> Patient patient
}

enum OrderState {
  o NotPaid
  o Paid
  o Finished
}

// OutboundHistory 出库记录
asset OutboundHistory identified by participantKey {
  o String participantKey
  o String number // 编号
  o DateTime outboundTime
  --> Order order
  --> Prescription prescription
  --> RegisterHistory registerHistory
  --> MedicalItem[] medicalItems
}

// Order 订单
asset Order identified by participantKey {
  o String participantKey
  o String number // 订单编号
  o OrderState state
  o DateTime created
  o Double spending // 总金额

  --> OrderItem[] orderItem // 订单明细

  --> Prescription prescription
  --> RegisterHistory registerHistory
  --> Patient patient
  --> CaseItem caseItem
}

// 订单明细
asset OrderItem  identified by assetKey {
  o String assetKey
  o String number // 编号
  --> MedicalItem medicalItem
  o Double count // 购买数量
  o String price // 单价
  o Double spending // 消费金额
}



/* ================= transaction: 主流程 ===================== */

/*
  排班 (使用rest服务器生成的API，暂时不做开发)
*/
transaction arrangement {
  o String doctorKey
  o String hospitalKey
  o VisitTime visitTime
  o DateTime visitDate
}

/*
  挂号: 生成挂号单 (使用rest服务器生成的API，暂时不做开发)
    params: Patient, ArrangementHistory
*/
transaction register {
}

/*
  就诊: 更新挂号单状态 Register -> Visiting
    params: RegisterHistory
*/
transaction visiting {
  --> RegisterHistory registerHistory
  o RegisterState state
}

/*
  开处方: 
  params: ArrangementHistory, complained, diagnose,  history, familyHistory, medicalItems 
  流程:
    1. 验证挂号单状态是否为 Visiting
    2. 验证药品列表
    3. 生成新的病例记录
    4. 生成处方
    5. 生成订单以及订单明细
    6. 更新挂号单状态 Visiting -> Finished
*/
transaction prescription {
}

/*
  支付: 更新订单状态 NotPaid -> Paid ，生成支付记录
  params: Order
*/
transaction paid {
}

/*
  取药: 更新订单状态 Paid -> Finished, 生成出库记录
*/
transaction finish {
}